{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","onChange","changed","value","options","map","opt","displayValue","label","module","exports","CheckoutSummary","style","width","margin","Burger","ingrediants","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipcode","minLength","maxLength","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","postFormData","formElementName","order","ings","price","orderData","userId","onPurchaseBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formValid","el","setState","formElementArray","key","this","id","config","form","onSubmit","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.1eecf0f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses= [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = <select className={inputClasses.join(' ')} onChange={props.changed} value={props.value}>\r\n                {props.elementConfig.options.map(opt =>(\r\n                    <option key={opt.value} value={opt.value} onChange={props.changed} >{opt.displayValue} </option>\r\n                ))}\r\n            </select> ;\r\n            break;    \r\n        default:  \r\n            inputElement = <input className={classes.InputElement} {...props.elementConfig} value={props.value}/>;\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.label}>{props.label} </label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r6nT\",\"Label\":\"Input_Label__gSaAU\",\"InputElement\":\"Input_InputElement__2DfmL\",\"Invalid\":\"Input_Invalid__2Eun-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2siMB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__BWfsV\"};","import React from \"react\";\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary} >\r\n            <h1>Enjoy your meal</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingrediants={props.ingredients} />\r\n            </div>\r\n            <Button btnType=\"Danger\"\r\n            clicked={props.checkoutCancelled}\r\n            >CANCEL</Button>\r\n            <Button btnType=\"Success\"\r\n            clicked={props.checkoutContinued}\r\n            >CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckoutSummary ;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport {updateObject, checkValidity} from '../../../shared/utulity';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm : {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipcode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 4,\r\n                    maxLength:4\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email : {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod : {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue:'Fastest'},\r\n                        {value: 'cheapest', displayValue:'Cheapest'}\r\n                    ]\r\n                },\r\n                validation: {},\r\n                value: 'fastest',\r\n                valid: true\r\n            },\r\n        },\r\n        formIsValid : false\r\n    }\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n       const postFormData = {};\r\n       for (let formElementName in this.state.orderForm) {\r\n           postFormData[formElementName] = this.state.orderForm[formElementName].value;\r\n       }\r\n     \r\n       const order = {\r\n           ingrediants : this.props.ings,\r\n           price : this.props.price,\r\n           orderData: postFormData,\r\n           userId: this.props.userId\r\n       };\r\n   \r\n       this.props.onPurchaseBurger(order,this.props.token);\r\n    }\r\n    inputChangedHandler = (event, inputIdentifier) =>{\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value : event.target.value,\r\n            valid : checkValidity(event.target.value , this.state.orderForm[inputIdentifier].validation),\r\n            touched : true\r\n        })\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier] : updatedFormElement\r\n        });\r\n    \r\n        let formValid = true;\r\n        for (let el in updatedOrderForm){\r\n            formValid = updatedOrderForm[el].valid && formValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formValid});\r\n    }\r\n    \r\n    render () {\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form = (\r\n        <form onSubmit={this.orderHandler}>\r\n            {formElementArray.map(el => (\r\n                <Input key={el.id}\r\n                elementType={el.config.elementType} \r\n                elementConfig={el.config.elementConfig}\r\n                value={el.config.value}\r\n                changed={(event) => this.inputChangedHandler(event,el.id)}\r\n                invalid = {!el.config.valid }\r\n                shouldValidate= {el.config.validation}\r\n                touched= {el.config.touched}\r\n                />\r\n            ))}\r\n            \r\n            <Button btnType=\"Success\" disabled={!this.state.formIsValid} >ORDER</Button>\r\n        </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner/>\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>enter your contact data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\nconst dispatchStateToProps = dispatch =>{\r\n    return {\r\n        onPurchaseBurger : (order, token) => dispatch(actions.purchaseBurger(order, token))\r\n    };\r\n};\r\nexport default connect(mapStateToProps,dispatchStateToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route,  Redirect } from \"react-router-dom\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render () {\r\n        let summary = <Redirect to=\"/\" />\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = (this.props.purchased) ? <Redirect to=\"/\"/> : null;\r\n           summary = (<div>\r\n               {purchasedRedirect}\r\n               <CheckoutSummary ingredients={this.props.ings} \r\n                checkoutCancelled={this.checkoutCancelledHandler}\r\n                checkoutContinued={this.checkoutContinuedHandler}\r\n                />\r\n                <Route path={this.props.match.path+ \"/contact-data\"}\r\n                component={ContactData} />\r\n                </div>);\r\n        }\r\n        return summary\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n\r\n"],"sourceRoot":""}