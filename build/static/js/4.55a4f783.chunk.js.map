{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","onChange","changed","value","options","map","opt","displayValue","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","formElementArray","key","this","id","config","form","onSubmit","el","btnType","loading","errorMessage","error","message","redirectAuth","isAuth","isBurgerBuild","to","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","signUp","actions"],"mappings":"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","file":"static/js/4.55a4f783.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses= [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} onChange={props.changed} value={props.value}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = <select className={inputClasses.join(' ')} onChange={props.changed} value={props.value}>\r\n                {props.elementConfig.options.map(opt =>(\r\n                    <option key={opt.value} value={opt.value} onChange={props.changed} >{opt.displayValue} </option>\r\n                ))}\r\n            </select> ;\r\n            break;    \r\n        default:  \r\n            inputElement = <input className={classes.InputElement} {...props.elementConfig} value={props.value}/>;\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.label}>{props.label} </label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r6nT\",\"Label\":\"Input_Label__gSaAU\",\"InputElement\":\"Input_InputElement__2DfmL\",\"Invalid\":\"Input_Invalid__2Eun-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3BI_7\"};","import { React, Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from \"react-router\";\r\nimport { updateObject, checkValidity } from \"../../shared/utulity\";\r\n\r\nclass Auth extends Component {\r\n\r\n    state= {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid:false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid:false,\r\n                touched: false\r\n            },\r\n        },\r\n        isSignUp: true\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName] : updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                touched: true,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation)\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () =>{\r\n        this.setState(prevState =>{\r\n            return {isSignUp: !prevState.isSignUp}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n        let form = \r\n        <form onSubmit={this.submitHandler}>\r\n        {formElementArray.map(el =>(\r\n            <Input key={el.id}\r\n                elementType={el.config.elementType} \r\n                elementConfig={el.config.elementConfig}\r\n                value={el.config.value}\r\n                changed={(event) => this.inputChangedHandler(event,el.id)}\r\n                invalid = {!el.config.valid }\r\n                shouldValidate= {el.config.validation}\r\n                touched= {el.config.touched}\r\n                />\r\n        ))}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>;\r\n\r\n        if (this.props.loading) {\r\n            form= <Spinner />;\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message} </p>\r\n            );\r\n        }\r\n        let redirectAuth= null;\r\n        if (this.props.isAuth ){\r\n            if (this.props.isBurgerBuild){\r\n                redirectAuth = <Redirect to={\"/checkout\"} />;\r\n            }else{\r\n                redirectAuth = <Redirect to={\"/\"} />;\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {redirectAuth}\r\n                {errorMessage}\r\n                <h1>{this.state.isSignUp ? 'Sign Up' : 'Sign In' }</h1>\r\n                {form}\r\n                <Button btnType=\"Danger\"\r\n                clicked={this.switchAuthModeHandler}\r\n                >SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuth: state.auth.token,\r\n        isBurgerBuild: state.burgerBuilder.building\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAuth: (email,password,signUp) => dispatch(actions.auth(email,password,signUp))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"],"sourceRoot":""}